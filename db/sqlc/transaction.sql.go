// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transaction (from_customer_accounts, to_customer_accounts, amount)
VALUES ($1, $2, $3) RETURNING id, from_customer_accounts, to_customer_accounts, amount, created_at
`

type CreateTransactionParams struct {
	FromCustomerAccounts int64 `json:"from_customer_accounts"`
	ToCustomerAccounts   int64 `json:"to_customer_accounts"`
	Amount               int64 `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.FromCustomerAccounts, arg.ToCustomerAccounts, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromCustomerAccounts,
		&i.ToCustomerAccounts,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransaction = `-- name: ListTransaction :one
SELECT id, from_customer_accounts, to_customer_accounts, amount, created_at
FROM transaction
WHERE id = $1 LIMIT 1
`

func (q *Queries) ListTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, listTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromCustomerAccounts,
		&i.ToCustomerAccounts,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionWithAmount = `-- name: ListTransactionWithAmount :many
SELECT id, from_customer_accounts, to_customer_accounts, amount, created_at
FROM transaction
WHERE amount = $1
`

func (q *Queries) ListTransactionWithAmount(ctx context.Context, amount int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionWithAmount, amount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromCustomerAccounts,
			&i.ToCustomerAccounts,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionWithFromID = `-- name: ListTransactionWithFromID :many
SELECT id, from_customer_accounts, to_customer_accounts, amount, created_at
FROM transaction
WHERE from_customer_accounts = $1
`

func (q *Queries) ListTransactionWithFromID(ctx context.Context, fromCustomerAccounts int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionWithFromID, fromCustomerAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromCustomerAccounts,
			&i.ToCustomerAccounts,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionWithToID = `-- name: ListTransactionWithToID :many
SELECT id, from_customer_accounts, to_customer_accounts, amount, created_at
FROM transaction
WHERE to_customer_accounts = $1
`

func (q *Queries) ListTransactionWithToID(ctx context.Context, toCustomerAccounts int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionWithToID, toCustomerAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromCustomerAccounts,
			&i.ToCustomerAccounts,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, from_customer_accounts, to_customer_accounts, amount, created_at
FROM transaction
ORDER BY id LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromCustomerAccounts,
			&i.ToCustomerAccounts,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
