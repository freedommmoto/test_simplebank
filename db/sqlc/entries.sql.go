// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: entries.sql

package db

import (
	"context"
)

const createEntries = `-- name: CreateEntries :one
INSERT INTO entries (
  id, customer_id , amount
) VALUES (
  $1, $2 , $3
)
RETURNING id, customer_id, amount, created_at
`

type CreateEntriesParams struct {
	ID         int64 `json:"id"`
	CustomerID int64 `json:"customer_id"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntries, arg.ID, arg.CustomerID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :one
SELECT id, customer_id, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) ListEntries(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, listEntries, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntriesByCustomerID = `-- name: ListEntriesByCustomerID :many
SELECT id, customer_id, amount, created_at FROM entries
WHERE customer_id = $1
`

func (q *Queries) ListEntriesByCustomerID(ctx context.Context, customerID int64) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
