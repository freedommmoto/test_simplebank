// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/freedommmoto/test_simplebank/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/freedommmoto/test_simplebank/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockStore) CreateCustomer(arg0 context.Context, arg1 db.CreateCustomerParams) (db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStoreMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStore)(nil).CreateCustomer), arg0, arg1)
}

// CreateEntries mocks base method.
func (m *MockStore) CreateEntries(arg0 context.Context, arg1 db.CreateEntriesParams) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntries", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntries indicates an expected call of CreateEntries.
func (mr *MockStoreMockRecorder) CreateEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntries", reflect.TypeOf((*MockStore)(nil).CreateEntries), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCustomer mocks base method.
func (m *MockStore) DeleteCustomer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockStoreMockRecorder) DeleteCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockStore)(nil).DeleteCustomer), arg0, arg1)
}

// GetCustomer mocks base method.
func (m *MockStore) GetCustomer(arg0 context.Context, arg1 int64) (db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockStoreMockRecorder) GetCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockStore)(nil).GetCustomer), arg0, arg1)
}

// GetCustomerForUpdate mocks base method.
func (m *MockStore) GetCustomerForUpdate(arg0 context.Context, arg1 int64) (db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerForUpdate indicates an expected call of GetCustomerForUpdate.
func (mr *MockStoreMockRecorder) GetCustomerForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerForUpdate", reflect.TypeOf((*MockStore)(nil).GetCustomerForUpdate), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListCustomer mocks base method.
func (m *MockStore) ListCustomer(arg0 context.Context, arg1 db.ListCustomerParams) ([]db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomer", arg0, arg1)
	ret0, _ := ret[0].([]db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomer indicates an expected call of ListCustomer.
func (mr *MockStoreMockRecorder) ListCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomer", reflect.TypeOf((*MockStore)(nil).ListCustomer), arg0, arg1)
}

// ListCustomerWithOwner mocks base method.
func (m *MockStore) ListCustomerWithOwner(arg0 context.Context, arg1 db.ListCustomerWithOwnerParams) ([]db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerWithOwner", arg0, arg1)
	ret0, _ := ret[0].([]db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerWithOwner indicates an expected call of ListCustomerWithOwner.
func (mr *MockStoreMockRecorder) ListCustomerWithOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerWithOwner", reflect.TypeOf((*MockStore)(nil).ListCustomerWithOwner), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockStore) ListEntries(arg0 context.Context, arg1 int64) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockStoreMockRecorder) ListEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockStore)(nil).ListEntries), arg0, arg1)
}

// ListEntriesByCustomerID mocks base method.
func (m *MockStore) ListEntriesByCustomerID(arg0 context.Context, arg1 int64) ([]db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntriesByCustomerID", arg0, arg1)
	ret0, _ := ret[0].([]db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntriesByCustomerID indicates an expected call of ListEntriesByCustomerID.
func (mr *MockStoreMockRecorder) ListEntriesByCustomerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntriesByCustomerID", reflect.TypeOf((*MockStore)(nil).ListEntriesByCustomerID), arg0, arg1)
}

// ListTransaction mocks base method.
func (m *MockStore) ListTransaction(arg0 context.Context, arg1 int64) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *MockStoreMockRecorder) ListTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*MockStore)(nil).ListTransaction), arg0, arg1)
}

// ListTransactionWithAmount mocks base method.
func (m *MockStore) ListTransactionWithAmount(arg0 context.Context, arg1 int64) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionWithAmount", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionWithAmount indicates an expected call of ListTransactionWithAmount.
func (mr *MockStoreMockRecorder) ListTransactionWithAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionWithAmount", reflect.TypeOf((*MockStore)(nil).ListTransactionWithAmount), arg0, arg1)
}

// ListTransactionWithFromID mocks base method.
func (m *MockStore) ListTransactionWithFromID(arg0 context.Context, arg1 int64) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionWithFromID", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionWithFromID indicates an expected call of ListTransactionWithFromID.
func (mr *MockStoreMockRecorder) ListTransactionWithFromID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionWithFromID", reflect.TypeOf((*MockStore)(nil).ListTransactionWithFromID), arg0, arg1)
}

// ListTransactionWithToID mocks base method.
func (m *MockStore) ListTransactionWithToID(arg0 context.Context, arg1 int64) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionWithToID", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionWithToID indicates an expected call of ListTransactionWithToID.
func (mr *MockStoreMockRecorder) ListTransactionWithToID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionWithToID", reflect.TypeOf((*MockStore)(nil).ListTransactionWithToID), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockStore) ListTransactions(arg0 context.Context, arg1 db.ListTransactionsParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockStoreMockRecorder) ListTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockStore)(nil).ListTransactions), arg0, arg1)
}

// MakeTransferTx mocks base method.
func (m *MockStore) MakeTransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTransferTx indicates an expected call of MakeTransferTx.
func (mr *MockStoreMockRecorder) MakeTransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTransferTx", reflect.TypeOf((*MockStore)(nil).MakeTransferTx), arg0, arg1)
}

// UpdateCustomer mocks base method.
func (m *MockStore) UpdateCustomer(arg0 context.Context, arg1 db.UpdateCustomerParams) (db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockStoreMockRecorder) UpdateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockStore)(nil).UpdateCustomer), arg0, arg1)
}

// UpdateCustomerBalance mocks base method.
func (m *MockStore) UpdateCustomerBalance(arg0 context.Context, arg1 db.UpdateCustomerBalanceParams) (db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerBalance", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerBalance indicates an expected call of UpdateCustomerBalance.
func (mr *MockStoreMockRecorder) UpdateCustomerBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerBalance", reflect.TypeOf((*MockStore)(nil).UpdateCustomerBalance), arg0, arg1)
}

// UpdateCustomerCurrency mocks base method.
func (m *MockStore) UpdateCustomerCurrency(arg0 context.Context, arg1 db.UpdateCustomerCurrencyParams) (db.CustomerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerCurrency", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerCurrency indicates an expected call of UpdateCustomerCurrency.
func (mr *MockStoreMockRecorder) UpdateCustomerCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerCurrency", reflect.TypeOf((*MockStore)(nil).UpdateCustomerCurrency), arg0, arg1)
}
